// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correctly 1`] = `
<View
  style={
    Object {
      "backgroundColor": "#FFFFFF",
      "flex": 1,
    }
  }
>
  <View
    style={
      Array [
        Object {
          "alignItems": "center",
          "flexDirection": "row",
          "height": 90,
          "paddingHorizontal": 23,
          "paddingTop": 50,
          "width": "100%",
        },
        undefined,
      ]
    }
  >
    <View
      accessible={true}
      focusable={true}
      onClick={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "opacity": 1,
        }
      }
    >
      <RNSVGSvgView
        align="xMidYMid"
        bbHeight="14"
        bbWidth="21"
        fill="none"
        focusable={false}
        height="14"
        meetOrSlice={0}
        minX={0}
        minY={0}
        style={
          Array [
            Object {
              "backgroundColor": "transparent",
              "borderWidth": 0,
            },
            Object {
              "flex": 0,
              "height": 14,
              "width": 21,
            },
          ]
        }
        vbHeight={14}
        vbWidth={21}
        width="21"
        xmlns="http://www.w3.org/2000/svg"
      >
        <RNSVGGroup
          fill={null}
          propList={
            Array [
              "fill",
            ]
          }
        >
          <RNSVGPath
            d="M6.64474 0.583984L0.433134 6.79559L0.167969 7.06076L0.433134 7.32592L6.64474 13.5375L7.17507 13.0072L1.66787 7.5L21 7.5V6.75L1.53939 6.75L7.17507 1.11431L6.64474 0.583984Z"
            fill={4278190080}
            propList={
              Array [
                "fill",
              ]
            }
          />
        </RNSVGGroup>
      </RNSVGSvgView>
    </View>
    <Text
      style={
        Object {
          "fontFamily": "Inter-Regular",
          "fontSize": 24,
          "fontWeight": "500",
          "marginLeft": 10,
        }
      }
    >
      Your Fans
    </Text>
  </View>
  <View
    style={
      Array [
        Object {
          "flexDirection": "row",
          "height": 40,
          "marginTop": 22,
          "paddingLeft": undefined,
          "paddingRight": undefined,
        },
        undefined,
      ]
    }
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "borderColor": "#e6e6e6",
            "borderRadius": 6,
            "borderWidth": 0.960092,
            "flex": 1,
            "flexDirection": "row",
            "height": "100%",
            "paddingLeft": 10,
            "paddingRight": 10,
          },
          Object {
            "borderColor": "#000000",
            "borderRadius": 5,
          },
        ]
      }
    >
      <TextInput
        allowFontScaling={true}
        onChangeText={[Function]}
        onFocus={[Function]}
        onSubmitEditing={[Function]}
        placeholder="Search"
        rejectResponderTermination={true}
        style={
          Array [
            Object {
              "color": "#000000",
              "flex": 1,
              "fontFamily": "Inter-Regular",
              "fontSize": 12,
              "fontStyle": "normal",
              "fontWeight": "500",
              "height": 40,
            },
            Object {
              "fontSize": 15,
            },
          ]
        }
        underlineColorAndroid="transparent"
        value=""
      />
      <View
        accessible={true}
        focusable={true}
        onClick={[Function]}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "opacity": 1,
            "padding": 5,
          }
        }
      >
        <RNSVGSvgView
          align="xMidYMid"
          bbHeight={17}
          bbWidth={17}
          fill="none"
          focusable={false}
          height={17}
          meetOrSlice={0}
          minX={0}
          minY={0}
          style={
            Array [
              Object {
                "backgroundColor": "transparent",
                "borderWidth": 0,
              },
              Object {
                "flex": 0,
                "height": 17,
                "width": 17,
              },
            ]
          }
          vbHeight={17}
          vbWidth={17}
          width={17}
        >
          <RNSVGGroup
            fill={null}
            propList={
              Array [
                "fill",
              ]
            }
          >
            <RNSVGPath
              d="M10.8066 11.177L10.9611 11.0225C13.1276 8.77361 13.102 5.19416 10.8845 2.97665C8.64118 0.733308 5.00401 0.733308 2.76067 2.97665C0.51733 5.21999 0.51733 8.85716 2.76067 11.1005C4.97821 13.318 8.5577 13.3435 10.8066 11.177ZM11.2392 12.1948C8.57193 14.4844 4.54891 14.3658 2.02214 11.839C-0.629082 9.18781 -0.629082 4.88934 2.02214 2.23812C4.67336 -0.413104 8.97184 -0.413104 11.6231 2.23812C14.1502 4.76529 14.2685 8.78917 11.9778 11.4564L16.539 16.0176L15.8005 16.7561L11.2392 12.1948Z"
              fill={4278190080}
              propList={
                Array [
                  "fill",
                ]
              }
            />
          </RNSVGGroup>
        </RNSVGSvgView>
      </View>
    </View>
  </View>
  <RCTScrollView
    ListEmptyComponent={[Function]}
    ListFooterComponent={[Function]}
    contentContainerStyle={
      Object {
        "paddingBottom": 30,
      }
    }
    data={Array []}
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    onContentSizeChange={[Function]}
    onEndReached={[Function]}
    onEndReachedThreshold={2}
    onEndThreshold={0.3}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onRefresh={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    refreshControl={
      <RefreshControlMock
        onRefresh={[Function]}
        refreshing={true}
      />
    }
    refreshing={true}
    removeClippedSubviews={false}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    style={
      Object {
        "backgroundColor": "#FFFFFF",
        "flex": 1,
      }
    }
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <RCTRefreshControl />
    <View>
      <View
        style={
          Object {
            "alignItems": "center",
            "alignSelf": "center",
            "flex": 1,
            "justifyContent": "center",
            "paddingTop": 20,
          }
        }
      />
      <View
        onLayout={[Function]}
      >
        <View
          style={
            Object {
              "alignItems": "center",
              "alignSelf": "center",
              "flex": 1,
              "justifyContent": "center",
              "paddingTop": 20,
            }
          }
        >
          <View />
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
